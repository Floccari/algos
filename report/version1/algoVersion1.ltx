\documentclass[a4paper,11pt]{article}
\usepackage{geometry}
\geometry{a4paper, total={170mm,257mm}, left=20mm, top=20mm}
\usepackage[utf8]{inputenc}
\usepackage[italian]{babel}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{listings}
\usepackage{color}
\usepackage{hyperref}
\usepackage{algorithm}
\usepackage{algorithmic}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\begin{document}
\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{step(currentBsState)}
\begin{algorithmic}[1]
\STATE $currentContext \leftarrow context[currentBsState]$
\FOR{\textbf{each} state in states[currentContext]}
\STATE $tran \leftarrow trOut[state]$
\WHILE{$tran \neq NIL$} 
\IF{$isEventPresent(currentContext,tran)$ \AND $isBufferFree(currentContext,tran)$}
\STATE $newContext \leftarrow createNewContext(currentContex,tran)$
\STATE $newTransition \leftarrow createNewTransition(currentContext,tran)$
\STATE $item \leftarrow contextSearch(newContext,ctHashMap)$
\IF{$item \neq NIL$}
\STATE $destinationBsState \leftarrow subValue[item]$
\STATE $dest[newTransition] \leftarrow destinationBsState$
\ELSE 
\STATE $createNewState(newContext,tran)$
\STATE $step(destinationBsState)$
\ENDIF
\ENDIF
\ENDWHILE
\ENDFOR
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{takeEventFromBuffer(context,action)}
\begin{algorithmic}[1]
\STATE $l \leftarrow link[action]$
\STATE $pos \leftarrow index[l]$
\RETURN $buffer[context][pos]$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{isEventPresent(context,transition)}
\begin{algorithmic}[1]
\STATE $actionRequest \leftarrow actIn[transition]$
\STATE $eventBuffer \leftarrow takeEventFromBuffer(context,actionRequest)$
\STATE $eventRequest \leftarrow event[actionRequest]$
\RETURN $(actionRequest = NIL$ \OR $eventBuffer = eventRequest)$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{isBufferFree(context,transition)}
\begin{algorithmic}[1]
\STATE $actionProduced \leftarrow actOut[transition]$
\WHILE {$actionProduced \neq NIL$}
\STATE $eventBuffer \leftarrow takeEventFromBuffer(context,actionProduced)$
\IF{$eventBuffer \neq NIL$}
\RETURN $FALSE$
\ENDIF
\STATE $actionProduced \leftarrow next[actionProduced]$
\ENDWHILE
\RETURN $TRUE$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{createNewContext(context,transition)}
\begin{algorithmic}[1]
\STATE $newContext \leftarrow initializeContext()$
\STATE $state \leftarrow dest[transition]$
\STATE $actionRequest \leftarrow actIn[transition]$
\STATE $eventRequest \leftarrow event[actionRequest]$
\IF {$eventRequest \neq NIL$}
\STATE $eventBuffer \leftarrow NIL$
\ENDIF
\STATE $actionProduced \leftarrow actOut[tran]$
\WHILE{$actionProduced$ \neq NIL$}
\STATE $l2 \leftarrow link[actionProduced]$
\STATE $pos2 \leftarrow index[l2]$
\STATE $buffer[newContext][pos2] \leftarrow actionProduced$
\STATE $actionProduced \leftarrow next[actionProduced]$
\ENDWHILE
\RETURN $newContext$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{createNewTransition(context,transition,currentBsState)}
\begin{algorithmic}[1]
\STATE $newTransition \leftarrow initializeTransition()$
\STATE $obs[newTransition] \leftarrow obs[transition]$
\STATE $rel[newTransition] \leftarrow rel[transition]$
\STATE $src[newTransition] \leftarrow currentBsState$
\STATE $addTransition(newTransition)$
\RETURN newTransition
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{createNewState(context,transition)}
\begin{algorithmic}[1]
\STATE $destinationBsState \leftarrow initializeState()$
\STATE $context[destinationBsState] \leftarrow context$
\IF{$isFinal(context)$} 
\STATE $final[destinationBsState] \leftarrow TRUE$
\ELSE 
\STATE $finale[destinationBsState] \leftarrow FALSE$
\ENDIF
\STATE $addState(destinationBsState)$
\STATE $dest[transition] \leftarrow destinationBsState$
\STATE $addContextToHashMap(context)$
\end{algorithmic}
\end{algorithm}


\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{dfs(state)}
\begin{algorithmic}[1]
\STATE $color[state] \leftarrow GRAY$
\STATE $transitionsIncoming \leftarrow trIn[state]$
\WHILE {$transitionsIncoming \neq NIL$}
\STATE $stateSource \leftarrow scr[transitionsIncoming]$
\IF {$color[stateSource] = WHITE$}
\STATE dfs[stateSource]
\ENDIF
\STATE $transitionsIncoming \leftarrow next[transitionsIncoming]$
\ENDWHILE
\STATE $color[state] \leftarrow BLACK$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{prune(network)}
\begin{algorithmic}[1]
\STATE\COMMENT {consideriamo solo reti con un solo automa, infatti il pruning avviene solo sulle 
\STATE network generate dal sistema}
\STATE $autom \leftarrow automatons[network]$
\STATE $totalState \leftarrow states[autom]$ 
\WHILE{$totalState \neq NIL$}
\IF{$final[totalState] = TRUE$}
\STATE $dfsVisit(totalState)$
\ENDIF
\STATE $totalState \leftarrow next[totalState]$
\ENDWHILE

\WHILE{$totalStat \neq NIL$}
\IF {$color[totalState] = WHITE$}
\STATE $removeTheState(network,totalState)$
\ENDIF
\STATE $totalState \leftarrow next[totalState]$
\ENDWHILE 
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{isTransitionObservable(context,transition)}
\begin{algorithmic}[1]
\STATE $label \leftarrow NIL$
\STATE $currentObservation \leftarrow currentObs[context]$
\STATE\COMMENT {Controllo sulla presenza della lista di osservazioni}
\IF {$currentObservation \neq NIL$}
\STATE $label \leftarrow currentObervation$
\STATE $transitionLabel \leftarrow obs[tansition]$
\STATE $idObsarvation \leftarrow id[transitionLabel]$
\ENDIF 
\IF{$transitionLabel \neq NIL$ \AND $(label \neq NIL$ \OR $idLabel \neq idObsarvation)$}
\RETURN FALSE
\ELSE
\RETURN TRUE
\ENDIF
\end{algorithmic}
\end{algorithm}

\end{document}
