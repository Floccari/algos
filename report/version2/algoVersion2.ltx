\documentclass[a4paper,11pt]{article}
\usepackage{geometry}
\geometry{a4paper, total={170mm,257mm}, left=20mm, top=20mm}
\usepackage[utf8]{inputenc}
\usepackage[italian]{babel}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{listings}
\usepackage{color}
\usepackage{hyperref}
\usepackage{algorithm}
\usepackage{algorithmic}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\begin{document}
\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{stepComp(currentBsState)}
\begin{algorithmic}[1]
\STATE $currentContext \leftarrow context[currentBsState]$
\FOR{\textbf{each} state in states[currentContext]}
\STATE $tran \leftarrow trOut[state]$
\WHILE{$tran \neq NIL$} 
\IF{$isEventPresent(currentContext,tran)$ \AND $isBufferFree(currentContext,tran)$ \AND $isTransitionObservable(currentContext,tran)$}
\STATE $newContext \leftarrow createNewContext(currentContex,tran)$
\STATE $newTransition \leftarrow createNewTransition(currentContext,tran)$
\STATE $item \leftarrow contextSearch(newContext,ctHashMap)$
\IF{$item \neq NIL$}
\STATE $destinationBsState \leftarrow subValue[item]$
\STATE $dest[newTransition] \leftarrow destinationBsState$
\ELSE 
\STATE $createNewState(newContext,tran)$
\STATE $stepComp(destinationBsState)$
\ENDIF
\ENDIF
\ENDWHILE
\ENDFOR
\end{algorithmic}
\end{algorithm}


\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{createNewContext(context,transition)}
\begin{algorithmic}[1]
\STATE $newContext \leftarrow initializeContext()$
\STATE $state \leftarrow dest[transition]$
\STATE $actionRequest \leftarrow actIn[transition]$
\STATE $eventRequest \leftarrow event[actionRequest]$
\IF {$eventRequest \neq NIL$}
\STATE $eventBuffer \leftarrow NIL$
\ENDIF
\STATE $actionProduced \leftarrow actOut[tran]$
\WHILE{$actionProduced$ \neq NIL$}
\STATE $l2 \leftarrow link[actionProduced]$
\STATE $pos2 \leftarrow index[l2]$
\STATE $buffer[newContext][pos2] \leftarrow actionProduced$
\STATE $actionProduced \leftarrow next[actionProduced]$
\ENDWHILE
\STATE $*********************************************$
\STATE $obsIndex[newContext] \leftarrow obsIndex[newContext]+1$
\STATE $currentObs[newContext] \leftarrow prev[currentObs[newContext]]$
\STATE\COMMENT {la lista parte dalla coda e poi va verso la testa, gli eventi sono specchiati rispetto ai valori di input}
\STATE $**********************************************$
\RETURN $newContext$
\end{algorithmic}
\end{algorithm}

\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{createNewState(context,transition)}
\begin{algorithmic}[1]
\STATE $destinationBsState \leftarrow initializeState()$
\STATE $context[destinationBsState] \leftarrow context$
\IF{$isFinal(context)$} 
\STATE $final[destinationBsState] \leftarrow TRUE$
\ELSE 
\STATE $finale[destinationBsState] \leftarrow FALSE$
\ENDIF
\STATE ***************************************
\IF{$currentObs[context] \neq NIL$}
\STATE $final[destinationBsState] \leftarrow FALSE$
\ENDIF
\STATE ***************************************
\STATE $netBs \leftarrow addState(destinationBsState)$
\STATE $dest[transition] \leftarrow destinationBsState$
\STATE $addContextToHashMap(context)$
\end{algorithmic}
\end{algorithm}


\begin{algorithm}
\renewcommand{\thealgorithm}{}
\floatname{algorithm}{}
\caption{isTransitionObservable(context,transition)}
\begin{algorithmic}[1]
\STATE $label \leftarrow NIL$
\STATE $currentObservation \leftarrow currentObs[context]$
\STATE\COMMENT {Controllo sulla presenza della lista di osservazioni}
\IF {$currentObservation \neq NIL$}
\STATE $label \leftarrow currentObervation$
\STATE $transitionLabel \leftarrow obs[tansition]$
\STATE $idObsarvation \leftarrow id[transitionLabel]$
\ENDIF 
\RETURN {$transitionLabel \neq NIL$ \AND $(label \neq NIL$ \OR $idLabel \neq idObsarvation)$}
\end{algorithmic}
\end{algorithm}

\end{document}
